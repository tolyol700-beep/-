import asyncio
import logging
import os
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from content_aggregator import ContentAggregator
from content_verifier import ContentVerifier
from telegram_poster import TelegramPoster
from database import Database

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class AutoInsiderAgent:
    def __init__(self):
        self.db = Database()
        self.aggregator = ContentAggregator()
        self.verifier = ContentVerifier()
        self.poster = TelegramPoster()
        self.scheduler = AsyncIOScheduler()
        
    async def collect_and_post_insurance(self):
        """–°–±–æ—Ä –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é"""
        await self.collect_and_post("insurance")
        
    async def collect_and_post_laws(self):
        """–°–±–æ—Ä –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∑–∞–∫–æ–Ω–∞–º"""
        await self.collect_and_post("laws")
        
    async def collect_and_post_humor(self):
        """–°–±–æ—Ä –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —é–º–æ—Ä—É"""
        await self.collect_and_post("humor")

    async def collect_and_post(self, content_type):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–±–æ—Ä–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            logging.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è {content_type}")
            
            # –°–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            raw_content = await self.aggregator.fetch_content(content_type)
            
            if not raw_content:
                logging.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            verified_content = await self.verifier.verify_content(raw_content, content_type)
            logging.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(verified_content)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
            
            if verified_content:
                # –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ø–æ—Å—Ç–∞
                best_post = self.verifier.select_best_post(verified_content)
                
                # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
                success = await self.poster.post_to_channel(best_post, content_type)
                
                if success:
                    await self.db.save_post(best_post, content_type)
                    logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç: {best_post['title'][:50]}...")
                else:
                    logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
            else:
                logging.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 9:00 - –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ (–ø–æ –ú–æ—Å–∫–≤–µ)
        self.scheduler.add_job(
            self.collect_and_post_insurance,
            CronTrigger(day_of_week='mon', hour=6, minute=0),  # 9:00 MSK = 6:00 UTC
            id='monday_insurance'
        )
        
        # –°—Ä–µ–¥–∞ 9:00 - –ó–∞–∫–æ–Ω—ã
        self.scheduler.add_job(
            self.collect_and_post_laws,
            CronTrigger(day_of_week='wed', hour=6, minute=0),
            id='wednesday_laws'
        )
        
        # –ü—è—Ç–Ω–∏—Ü–∞ 9:00 - –Æ–º–æ—Ä
        self.scheduler.add_job(
            self.collect_and_post_humor,
            CronTrigger(day_of_week='fri', hour=6, minute=0),
            id='friday_humor'
        )

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –ê–≤—Ç–æ–ò–Ω—Å–∞–π–¥–µ—Ä–∞...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.setup_schedule()
        self.scheduler.start()
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        logging.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫...")
        await self.collect_and_post_insurance()
        
        logging.info("‚è∞ –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

async def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token or token == "your_bot_token_here":
        logging.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    agent = AutoInsiderAgent()
    await agent.run()

if __name__ == "__main__":
    asyncio.run(main())
