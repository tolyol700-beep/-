import asyncio
import logging
import os
import random
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from content_aggregator import ContentAggregator
from content_verifier import ContentVerifier
from telegram_poster import TelegramPoster
from database import Database

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class AutoInsiderAgent:
    def __init__(self):
        self.db = Database()
        self.aggregator = ContentAggregator()
        self.verifier = ContentVerifier()
        self.poster = TelegramPoster()
        self.scheduler = AsyncIOScheduler()
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        self.fallback_content = {
            "insurance": [
                {
                    'title': '–û–°–ê–ì–û: —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ 2024 –≥–æ–¥—É',
                    'summary': '–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö –û–°–ê–ì–û, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –≤ 2024 –≥–æ–¥—É. –ù–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã, —É—Å–ª–æ–≤–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.',
                    'link': 'https://www.vesti.ru/finance/article/3456789',
                    'source': '–†–µ–∑–µ—Ä–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫'
                }
            ],
            "laws": [
                {
                    'title': '–ù–æ–≤—ã–µ —à—Ç—Ä–∞—Ñ—ã –ì–ò–ë–î–î 2024',
                    'summary': '–û–±–∑–æ—Ä –Ω–æ–≤—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ü–î–î, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å 2024 –≥–æ–¥–∞. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –≤–æ–¥–∏—Ç–µ–ª—å.',
                    'link': 'https://www.gazeta.ru/auto/news/2024/02/15/12345.shtml',
                    'source': '–†–µ–∑–µ—Ä–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫'
                }
            ],
            "humor": [
                {
                    'title': '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–∫–æ–ª—ã',
                    'summary': '–°–º–µ—à–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö –∏ –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞—Ö. –Æ–º–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–π–º—É—Ç —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª–∏!',
                    'link': 'https://www.anekdot.ru/',
                    'source': '–†–µ–∑–µ—Ä–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫'
                }
            ]
        }

    async def collect_and_post_insurance(self):
        await self.collect_and_post("insurance")
        
    async def collect_and_post_laws(self):
        await self.collect_and_post("laws")
        
    async def collect_and_post_humor(self):
        await self.collect_and_post("humor")

    async def collect_and_post(self, content_type):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–±–æ—Ä–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            logging.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è {content_type}")
            
            # –°–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            raw_content = await self.aggregator.fetch_content(content_type)
            
            if not raw_content:
                logging.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π")
                raw_content = self.fallback_content.get(content_type, [])
            
            if not raw_content:
                logging.error("‚ùå –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            verified_content = await self.verifier.verify_content(raw_content, content_type)
            
            if not verified_content:
                logging.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π")
                verified_content = raw_content[:1]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç

            logging.info(f"‚úÖ –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ {len(verified_content)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
            
            if verified_content:
                # –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ø–æ—Å—Ç–∞
                best_post = self.verifier.select_best_post(verified_content)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –ª–∏ —É–∂–µ
                if not self.db.is_posted(best_post['title'], best_post['source']):
                    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
                    success = await self.poster.post_to_channel(best_post, content_type)
                    
                    if success:
                        await self.db.save_post(best_post, content_type)
                        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç: {best_post['title'][:50]}...")
                    else:
                        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
                else:
                    logging.info("‚ö†Ô∏è –ü–æ—Å—Ç —É–∂–µ –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            else:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 9:00 MSK - –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ
        self.scheduler.add_job(
            self.collect_and_post_insurance,
            CronTrigger(day_of_week='mon', hour=6, minute=0),  # 9:00 MSK = 6:00 UTC
            id='monday_insurance'
        )
        
        # –°—Ä–µ–¥–∞ 9:00 MSK - –ó–∞–∫–æ–Ω—ã
        self.scheduler.add_job(
            self.collect_and_post_laws,
            CronTrigger(day_of_week='wed', hour=6, minute=0),
            id='wednesday_laws'
        )
        
        # –ü—è—Ç–Ω–∏—Ü–∞ 9:00 MSK - –Æ–º–æ—Ä
        self.scheduler.add_job(
            self.collect_and_post_humor,
            CronTrigger(day_of_week='fri', hour=6, minute=0),
            id='friday_humor'
        )

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –ê–≤—Ç–æ–ò–Ω—Å–∞–π–¥–µ—Ä–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        try:
            test_success = await self.poster.test_connection()
            if not test_success:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
                return
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.setup_schedule()
        self.scheduler.start()
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        logging.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫...")
        await self.collect_and_post("insurance")
        
        logging.info("‚è∞ –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        logging.info("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ü–ù 9:00 - –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ, –°–† 9:00 - –ó–∞–∫–æ–Ω—ã, –ü–¢ 9:00 - –Æ–º–æ—Ä (–ø–æ –ú–°–ö)")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

async def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token or token == "your_bot_token_here":
        logging.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        logging.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return
    
    agent = AutoInsiderAgent()
    await agent.run()

if __name__ == "__main__":
    asyncio.run(main())
