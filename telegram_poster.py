from telegram import Bot
from telegram.error import TelegramError
from config import TELEGRAM_BOT_TOKEN, CHANNEL_ID
import logging

class TelegramPoster:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.channel_id = CHANNEL_ID
        
    async def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        try:
            await self.bot.get_me()
            logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False
        
    def format_post(self, content, content_type):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è Telegram"""
        emoji_map = {
            "insurance": "üõ°Ô∏è",
            "laws": "‚öñÔ∏è", 
            "humor": "üòÑ"
        }
        
        title_map = {
            "insurance": "–ù–û–í–û–°–¢–ò –°–¢–†–ê–•–û–í–ê–ù–ò–Ø",
            "laws": "–û–ë–ù–û–í–õ–ï–ù–ò–Ø –í –ó–ê–ö–û–ù–ê–•",
            "humor": "–ê–í–¢–û–Æ–ú–û–† –ü–Ø–¢–ù–ò–¶–´"
        }
        
        emoji = emoji_map.get(content_type, "üì∞")
        title = title_map.get(content_type, "–ù–û–í–ê–Ø –°–¢–ê–¢–¨–Ø")
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
        summary = content['summary'][:400] + "..." if len(content['summary']) > 400 else content['summary']
        
        message = f"""{emoji} <b>{title}</b>

üìå {content['title']}

üìñ {summary}

üîó <a href="{content['link']}">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>
üìä –ò—Å—Ç–æ—á–Ω–∏–∫: {self.get_source_name(content['source'])}

üí° –ù–∞—à –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏: @CarInsuranceFastBot

#{content_type} #{self.get_source_tag(content['source'])}"""
        
        return message
        
    def get_source_name(self, source_url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        domain_map = {
            'vedomosti.ru': '–í–µ–¥–æ–º–æ—Å—Ç–∏',
            'kommersant.ru': '–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç',
            'rbc.ru': '–†–ë–ö',
            'rg.ru': '–†–æ—Å—Å–∏–π—Å–∫–∞—è –≥–∞–∑–µ—Ç–∞',
            'fishki.net': '–§–∏—à–∫–∏',
            'anekdot.ru': '–ê–Ω–µ–∫–¥–æ—Ç.—Ä—É',
            'drom.ru': 'Drom',
            '–†–µ–∑–µ—Ä–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫': '–†–µ–¥–∞–∫—Ü–∏—è'
        }
        
        for domain, name in domain_map.items():
            if domain in source_url:
                return name
        return "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"
        
    def get_source_tag(self, source_url):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–∞ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        for domain in ['vedomosti', 'kommersant', 'rbc', 'rg', 'fishki', 'anekdot', 'drom']:
            if domain in source_url:
                return domain
        return 'autonews'
        
    async def post_to_channel(self, content, content_type):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            message = self.format_post(content, content_type)
            
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=False
            )
            
            logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª: {content['title'][:50]}...")
            return True
            
        except TelegramError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return False
        except Exception as e:
            logging.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return False
